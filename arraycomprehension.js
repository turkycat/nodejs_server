// Generated by CoffeeScript 1.10.0
(function() {
  var indices, j, k, kplus1, l, list, m, manual_squares, manual_squares2, mapped, mapped2, num, ref, ref1, results, results1, square, squareelse, squareelse6, squareelsenots, squareelsepp, squareelsepp2, squareelsepp3, squareelsepp4, squareelsepp5, squareelses, squareif, squareifs, squareinvoke, squareinvokes, squares, w, wplus1, z, zplus1;

  square = function(x) {
    return x * x;
  };

  squareelse = function(x, y) {
    if (y % 2) {
      return x * x;
    } else {
      return x;
    }
  };

  squareif = function(x, y) {
    if (y) {
      return x * x;
    }
  };

  list = [1, 2, 3, 4, 5, 6, 7, 8];

  squares = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(square(num));
    }
    return results;
  })();

  squareifs = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(squareif(num, 1));
    }
    return results;
  })();

  squareelses = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(squareelse(num, 1));
    }
    return results;
  })();

  squareelsenots = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(squareelse(num, 0));
    }
    return results;
  })();

  j = 0;

  squareelsepp = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(squareelse(num, j++));
    }
    return results;
  })();

  k = 0;

  kplus1 = function(x) {
    return k++;
  };

  squareelsepp2 = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(squareelse(num, kplus1(k)));
    }
    return results;
  })();

  w = 0;

  wplus1 = function(x) {
    return ++k;
  };

  squareelsepp3 = (function() {
    var l, len, results;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(squareelse(num, wplus1(w)));
    }
    return results;
  })();

  squareelsepp4 = (function() {
    var l, len, m, ref, results, results1;
    results = [];
    for (l = 0, len = list.length; l < len; l++) {
      num = list[l];
      results.push(squareelse(num, (function() {
        results1 = [];
        for (var m = 0, ref = list.length; 0 <= ref ? m <= ref : m >= ref; 0 <= ref ? m++ : m--){ results1.push(m); }
        return results1;
      }).apply(this)));
    }
    return results;
  })();

  indices = (function() {
    results = [];
    for (var l = 0, ref = list.length; 0 <= ref ? l <= ref : l >= ref; 0 <= ref ? l++ : l--){ results.push(l); }
    return results;
  }).apply(this);

  squareelsepp5 = (function() {
    var len, m, results1;
    results1 = [];
    for (m = 0, len = list.length; m < len; m++) {
      num = list[m];
      results1.push(squareelse(num, indices));
    }
    return results1;
  })();

  squareinvoke = function(x, f) {
    if ((f(z)) % 2) {
      return x * x;
    } else {
      return x;
    }
  };

  z = 0;

  zplus1 = function(x) {
    return ++z;
  };

  squareinvokes = (function() {
    var len, m, results1;
    results1 = [];
    for (m = 0, len = list.length; m < len; m++) {
      num = list[m];
      results1.push(squareinvoke(num, zplus1));
    }
    return results1;
  })();

  squareelse6 = (function() {
    var len, m, n, ref1, results1, results2;
    results1 = [];
    for (m = 0, len = list.length; m < len; m++) {
      num = list[m];
      results1.push(squareelse(num, zplus1((function() {
        results2 = [];
        for (var n = 0, ref1 = list.length; 0 <= ref1 ? n <= ref1 : n >= ref1; 0 <= ref1 ? n++ : n--){ results2.push(n); }
        return results2;
      }).apply(this))));
    }
    return results1;
  })();

  manual_squares = [];

  manual_squares2 = [];

  list.forEach(function(i) {
    manual_squares.push(i % 2 ? square(i) : i);
    if (i % 2) {
      return manual_squares2.push(square(i));
    } else {
      return manual_squares2.push(i);
    }
  });

  mapped = list.map(function(i) {
    return square(i);
  });

  mapped2 = (function() {
    results1 = [];
    for (var m = 0, ref1 = list.length; 0 <= ref1 ? m <= ref1 : m >= ref1; 0 <= ref1 ? m++ : m--){ results1.push(m); }
    return results1;
  }).apply(this).map(function(i) {
    return square(i);
  });

  console.log(squares, squareifs);

  console.log(squareifs);

  console.log(squareelses, squareelsenots);

  console.log(squareelsepp, squareelsepp2, squareelsepp3);

  console.log(squareelsepp4, indices);

  console.log(squareinvokes, squareelse6);

  console.log(manual_squares, manual_squares2);

  console.log(mapped, mapped2);

}).call(this);
